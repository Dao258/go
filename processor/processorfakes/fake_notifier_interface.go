// Code generated by counterfeiter. DO NOT EDIT.
package processorfakes

import (
	"sync"

	".."
)

type FakeNotifierInterface struct {
	ErrorStub        func(error, string, int, int)
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
		arg1 error
		arg2 string
		arg3 int
		arg4 int
	}
	SkipStub        func(string, string, int, int)
	skipMutex       sync.RWMutex
	skipArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int
		arg4 int
	}
	SuccessStub        func(string, int, int)
	successMutex       sync.RWMutex
	successArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNotifierInterface) Error(arg1 error, arg2 string, arg3 int, arg4 int) {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
		arg1 error
		arg2 string
		arg3 int
		arg4 int
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("Error", []interface{}{arg1, arg2, arg3, arg4})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		fake.ErrorStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeNotifierInterface) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *FakeNotifierInterface) ErrorCalls(stub func(error, string, int, int)) {
	fake.errorMutex.Lock()
	defer fake.errorMutex.Unlock()
	fake.ErrorStub = stub
}

func (fake *FakeNotifierInterface) ErrorArgsForCall(i int) (error, string, int, int) {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	argsForCall := fake.errorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeNotifierInterface) Skip(arg1 string, arg2 string, arg3 int, arg4 int) {
	fake.skipMutex.Lock()
	fake.skipArgsForCall = append(fake.skipArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int
		arg4 int
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("Skip", []interface{}{arg1, arg2, arg3, arg4})
	fake.skipMutex.Unlock()
	if fake.SkipStub != nil {
		fake.SkipStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *FakeNotifierInterface) SkipCallCount() int {
	fake.skipMutex.RLock()
	defer fake.skipMutex.RUnlock()
	return len(fake.skipArgsForCall)
}

func (fake *FakeNotifierInterface) SkipCalls(stub func(string, string, int, int)) {
	fake.skipMutex.Lock()
	defer fake.skipMutex.Unlock()
	fake.SkipStub = stub
}

func (fake *FakeNotifierInterface) SkipArgsForCall(i int) (string, string, int, int) {
	fake.skipMutex.RLock()
	defer fake.skipMutex.RUnlock()
	argsForCall := fake.skipArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeNotifierInterface) Success(arg1 string, arg2 int, arg3 int) {
	fake.successMutex.Lock()
	fake.successArgsForCall = append(fake.successArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("Success", []interface{}{arg1, arg2, arg3})
	fake.successMutex.Unlock()
	if fake.SuccessStub != nil {
		fake.SuccessStub(arg1, arg2, arg3)
	}
}

func (fake *FakeNotifierInterface) SuccessCallCount() int {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return len(fake.successArgsForCall)
}

func (fake *FakeNotifierInterface) SuccessCalls(stub func(string, int, int)) {
	fake.successMutex.Lock()
	defer fake.successMutex.Unlock()
	fake.SuccessStub = stub
}

func (fake *FakeNotifierInterface) SuccessArgsForCall(i int) (string, int, int) {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	argsForCall := fake.successArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNotifierInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.skipMutex.RLock()
	defer fake.skipMutex.RUnlock()
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNotifierInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ processor.NotifierInterface = new(FakeNotifierInterface)
